---
- name: Copy public key into tempfile
  copy:
    remote_src: yes
    src: /root/.ssh/authorized_keys
    dest: /root/tmpKey
  retries: 3
  delay: 5
  register: cp_ssh_key
  until: cp_ssh_key.state is defined

- name: Check if the template file exists in the playbook
  stat:
    path: "{{ playbook_dir }}/templates/post-install.sh.j2"
  register: template_file

- name: Copy post-install script to /root/post-install.sh if it exists
  template:
    src: post-install.sh.j2
    dest: /root/post-install.sh
    mode: '0755'
    owner: root
    group: root
  when: template_file.stat.exists

- name: Download custom OS image
  get_url:
    url: "{{ hetzner_installimage_custom_image_url }}"
    dest: /tmp/{{ hetzner_installimage_custom_image_url | basename }}
    mode: '0640'
  when: hetzner_installimage_custom_image_url is defined

- name: Include installimage config tasks
  include: config.yml

- name: Pause for a few seconds in order to avoid "device in use" issues after reboot
  pause:
    seconds: "{{ hetzner_installimage_installimage_pause }}"

- name: run installimage
  command: /root/.oldroot/nfs/install/installimage -K /root/.ssh/authorized_keys -c /root/installimage.cfg -a
  register: installimage_result
  changed_when: true
  failed_when: "'Error' in installimage_result.stderr or 'failed' in installimage_result.stdout"

- name: do another hardware reset
  uri:
    url: "{{ hetzner_installimage_robot_api_base_url }}/reset/{{ hetzner_installimage_ansible_host_ip }}"
    method: POST
    user: "{{ hetzner_installimage_webservice_username }}"
    password: "{{ hetzner_installimage_webservice_password }}"
    force_basic_auth: yes
    body: "type=hw"
    status_code: 200
    body_format: form-urlencoded
  delegate_to: localhost
  register: reset

- name: remove server from local known_hosts file
  known_hosts:
    path: "{{ lookup('env','HOME') }}/.ssh/known_hosts"
    name: "{{ ansible_host }}"
    state: absent
  delegate_to: localhost

- name: pause a bit for the hardware reset to kick in
  pause:
    seconds: "{{ hetzner_installimage_reboot_pause }}"
  delegate_to: localhost

- name: waiting for server to come back
  wait_for:
    host: "{{ hetzner_installimage_wait_for_host }}"
    port: 22
    delay: 1
    timeout: 180
  delegate_to: localhost

- name: Check is apt-get installed
  raw: command -v apt-get >/dev/null 2>&1
  changed_when: false
  register: apt_get_exists
  ignore_errors: yes

# uses raw instead of module as python might not be installed yet
- name: update apt repositories
  raw: apt-get update
  changed_when: true
  retries: 3
  delay: 5
  register: update_apt
  until: update_apt.rc == 0
  when: apt_get_exists.rc == 0

# uses raw instead of module as python might not be installed yet
- name: install python on remote host
  raw: apt-get install python3 -y
  changed_when: true
  when: apt_get_exists.rc == 0

- name: Lookup content of installimage config file
  set_fact:
    installimage_cfg_content: "{{ lookup('template', './installimage.j2') }}"

- name: generate hetzner_installimage_provisioned.flag content using the content of the installimage config
  set_fact:
    provisioned_flag_content: "{{ installimage_cfg_content | md5 }}"

- name: create provisioned_flag file
  template:
    src: provisioned.flag.j2
    dest: /etc/hetzner_installimage_provisioned.flag
    owner: root
    group: root
    mode: 0644

- name: copy installimage configuration file to host for debugging reasons
  template:
    src: installimage.j2
    dest: /etc/hetzner_installimage.cfg
    owner: root
    group: root
    mode: 0644

- name: set the server name in the hetzner robot if defined
  uri:
    url: "{{ hetzner_installimage_robot_api_base_url }}/server/{{ hetzner_installimage_ansible_host_ip }}"
    method: POST
    user: "{{ hetzner_installimage_webservice_username }}"
    password: "{{ hetzner_installimage_webservice_password }}"
    force_basic_auth: yes
    body: "server_name={{ hetzner_installimage_server_name }}"
    status_code: 200
  delegate_to: localhost
  register: hetzner_installimage_rescue
  when: hetzner_installimage_server_name is defined
